{-# START_FILE LICENSE #-}
Copyright {{author-name}}{{^author-name}}Author name here{{/author-name}} (c) {{year}}{{^year}}2017{{/year}}

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of {{author-name}}{{^author-name}}Author name here{{/author-name}} nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


{-# START_FILE test/Spec.hs #-}
{-# OPTIONS_GHC -F -pgmF hspec-discover #-}


{-# START_FILE test/Lib.hs #-}
module {{name}}{{^name}}Lib{{/name}} (main, spec) where

import Test.Hspec
import Test.QuickCheck

import {{name}}{{^name}}Lib{{/name}}

main :: IO ()
main = hspec spec

spec :: Spec
spec = do
  describe "SomeFunc" $ do
    it "prints 'SomeFunc'" $ do
        SomeFunc `shouldReturn` ()
{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain


{-# START_FILE README.md #-}
# {{name}}


{-# START_FILE .hindent.yaml #-}
indent-size: 4
line-length: 80
force-trailing-newline: true

{-# START_FILE .hlint.yaml #-}
# HLint configuration file
# https://github.com/ndmitchell/hlint
##########################

# This file contains a template configuration file, which is typically
# placed as .hlint.yaml in the root of your project

# Warnings currently triggered by your code
- ignore: { name: "Parse error: on input `{'" } # 4 hints

# Specify additional command line arguments
#
# - arguments: [--color, --cpp-simple, -XQuasiQuotes]

# Control which extensions/flags/modules/functions can be used
#
# - extensions:
#   - default: false # all extension are banned by default
#   - name: [PatternGuards, ViewPatterns] # only these listed extensions can be used
#   - {name: CPP, within: CrossPlatform} # CPP can only be used in a given module
#
# - flags:
#   - {name: -w, within: []} # -w is allowed nowhere
#
# - modules:
#   - {name: [Data.Set, Data.HashSet], as: Set} # if you import Data.Set qualified, it must be as 'Set'
#   - {name: Control.Arrow, within: []} # Certain modules are banned entirely
#
# - functions:
#   - {name: unsafePerformIO, within: []} # unsafePerformIO can only appear in no modules

# Add custom hints for this project
#
# Will suggest replacing "wibbleMany [myvar]" with "wibbleOne myvar"
# - error: {lhs: "wibbleMany [x]", rhs: wibbleOne x}

# The hints are named by the string they display in warning messages.
# For example, if you see a warning starting like
#
# Main.hs:116:51: Warning: Redundant ==
#
# You can refer to that hint with `{name: Redundant ==}` (see below).

# Turn on hints that are off by default
#
# Ban "module X(module X) where", to require a real export list
# - warn: {name: Use explicit module export list}
#
# Replace a $ b $ c with a . b $ c
# - group: {name: dollar, enabled: true}
#
# Generalise map to fmap, ++ to <>
# - group: {name: generalise, enabled: true}

# Ignore some builtin hints
# - ignore: {name: Use let}
# - ignore: {name: Use const, within: SpecialModule} # Only within certain modules

# Define some custom infix operators
# - fixity: infixr 3 ~^#^~

# To generate a suitable file for HLint do:
# $ hlint --default > .hlint.yaml

{-# START_FILE app/Main.hs #-}
module Main where

import 

main :: IO ()
main = SomeFunc


{-# START_FILE .gitignore #-}
.stack-work/
*.cabal


{-# START_FILE package.yaml #-}
name: {{name}}
version: '0.1.0'
category: {{category}}{{^category}}Web{{/category}}
author: {{author-name}}{{^author-name}}Author name here{{/author-name}}
maintainer: {{author-email}}{{^author-email}}example@example.com{{/author-email}}
copyright: {{copyright}}{{^copyright}}{{year}}{{^year}}2023{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}
license: BSD3
github: {{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}

ghc-options: -Wall -fno-warn-incomplete-uni-patterns

dependencies:
  - base >=4.9 && <5


library:
  source-dirs:        src
  exposed-modules:    {{name}}{{^name}}Lib{{/name}}

executable:
  {{name}}:
    main: Main.hs
    source-dirs: app
    ghc-options: -threaded -rtsopts -with-rtsopts=-N
    dependencies:
      - {{name}}

tests:
  {{name}}-test:
    main: Spec.hs
    source-dirs: test
    ghc-options: -threaded -rtsopts -with-rtsopts=-N
    dependencies:
      - {{name}}
      - hspec
      - QuickCheck
    build-tools: hspec-discover

benchmarks:
  {{name}}-test:
    main: Main.hs
    source-dirs: benchmarks
    ghc-options: -threaded -rtsopts -with-rtsopts=-N
    dependencies:
      - {{name}}
      - criterion
{-# START_FILE benchmarks/Main.hs #-}
module Main where

import {{name}}{{^name}}Lib{{/name}}
import Criterion
import Criterion.Main

main :: IO ()
main = helloWorld
{-# START_FILE src/Lib.hs #-}
module {{#lambda.titlecase}}{{name}}{{/lambda.titlecase}} (SomeFunc) where

SomeFunc :: IO ()
SomeFunc = putStrLn "SomeFunc"